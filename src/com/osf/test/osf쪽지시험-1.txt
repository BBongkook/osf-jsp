*유의사항
 1. 대소문자 띄어쓰기 구분 정확하게 해야 합니다.
 2. 실행결과가 오류라고 생각될 경우 오류라고 서술하시면 됩니다.
 
 - 아래 코드의 실행 결과를 순서대로 서술하여 제출해주세요.
interface Action{
	void attack();
	void run();
}
class Person implements Action{
}
public class Worker extends Person{
	public void attack(){
		System.out.println("키보드 워리어!");
	}
	public void run(){
		System.out.println("지각이다! 달리자!!");
	}
	public static void main(String[] args){
		Worker w = new Worker();
		w.attack();
		w.run();
	}
}
 1.[       오류             ]
 2.[       오류             ]
 

 - 아래의 코드는 게임리스트에 대한 단건 조회와 복수건 조회를 구현한 코드입니다.
대괄호에 들어가야할 올바른 코드를 작성해주세요.

public class GameList {
	static final List<3.[Map<String,String> ]> LIST;
	static {
		LIST = new ArrayList<>();
		Map<4.[String,String      ]> game = new HashMap<>();
		game.put("name", "슈퍼마리오");
		game.put("price", "30000");
		LIST.add(game);
		game = new HashMap<>();
		game.put("name", "스트리트파이터2");
		game.put("price", "35000");
		LIST.add(game);
		game = new HashMap<>();
		game.put("name", "스트리트파이터3");
		game.put("price", "40000");
		LIST.add(game);
	}
	//이름이 일치할때만 검색하는 메소드입니다. - 단건
	public static Map<String,String> searchGame(String name){
		for(int i=0;i<LIST.size();i++) {
			Map<String,String> game = LIST.get(i);
			if(name.equals(game.get("name"))) {
				5.[return game   ]
			}
		}
		return null;
	}
	//검색하는 이름이 있으면(like)검색하는 메소드입니다. - 복수건
	public static List<Map<String,String>> searchGameList(String name){
		List<Map<String,String>> gameList = new ArrayList<>();
		for(int i=0;i<LIST.size();i++) {
			Map<String,String> game = LIST.get(i);
			if(6.[game.get("name").indexOf(name)]) {
				gameList.add(game);
			}
		}
		return gameList;
	}
	public static void main(String[] args) {
		Map<String,String> game = searchGame("슈퍼마리오");
		if(7.[game==null                    ]) {
			System.out.println("조회 결과 없음.");
		}else {
			System.out.println(game);
		}
		
		List<Map<String,String>> gameList = searchGameList("파이터");
		if(8.[gameList.size()==0                    ]) {
			System.out.println("조회 결과 없음.");
		}else {
			System.out.println(gameList);
		}
	}
}

-아래의 설명을 보고 올바른 접근제어자를 서술해주세요.
9. 해당 클레스에서만 접근 가능 [private          ]
10. 어떤 패키지에서든 접근 가능 [public          ]

11. 자바가 프로그램을 완성시키면 어떤 플랫폼이나 OS상관없이 실행
가능한 이유에대해 서술해주세요.
[
												
											]
 - 아래의 코드는 오라클에 접속하는 클래스입니다.
대괄호에 들어가야할 올바른 코드를 작성해주세요.
public class DBCon {
	private static final String URL = "jdbc:oracle:thin:@localhost:1521:xe";
	private static final String USER = "osfu";
	private static final String PASSWORD = "12345678";
	private static final String CLASS_NAME = "oracle.jdbc.OracleDriver";
	private static Connection con;
	
	private static boolean openCon(){
		try {
			12.[class.forName(CLASS_NAME) ];
			con = DriverManager.getConnection(URL, USER, PASSWORD);
			return true;
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
	public static Connection getCon() {
		if(con==null) {
			if(open()) {
				return con;
			}
		}
		return null;
	}
	public static void closeCon() {
		if(13.[con!=null              ]) {
			try {
				if(!con.isClosed()) {
					14.[con.close()            ];
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		con = null;
	}
}

 - 아래의 테이블 정보를 보고 알맞은 sql을 작성해주세요
 table name : user_info
 table column : 
  - ui_num, 숫자(최대값 9999), 기본키
  - ui_name, 문자(최대 100바이트), 널불가
  - ui_age, 숫자(최대 999), 널불가
  - ui_id, 문자(최대 100바이트), 널불가, 중복불가
  - ui_etc, 문자(최대 4000바이트)
  
15. 위의 테이블을 생성하는 sql문을 작성해주세요.
[


												]
16.	ui_name에 '홍'으로 시작하는 데이터를 조회
[ select * from user_info where ui_name like '홍%';												]
17. ui_name에 '길동'으로 끝나는 데이터를 조회
[ select * from user_info where ui_name like '%길동';												]
18. ui_age가 20살 이상이면서 40살 미만인 데이터를 조회
[ select * from user_info where ui_age>=20 and ui_age<40;												]
19. ui_age가 80살 이상인 데이터의 ui_etc를 '고령'으로 업데이트
[ update user_info set ui_etc='고령' where ui_age>=80;												]
20. ui_age가 4살 이하인 데이터의 ui_etc를 '유아'로 업데이트
[ update user_info set ui_etc='유아' where ui_age<=4;												]
21. ui_age의 평균과 총합을 조회
[ select avg(ui_age), sum(ui_age) from user_info;												]
22. 데이터를 ui_age 오름차순으로 조회
[ select * from user_info where ui_age order by asc;												]
23. ui_name과 ui_id가 동일한 데이터를 조회
[ select * from user_info where ui_name=ui_id;												]
24. 나이가 제일 많은 데이터를 조회
[ select * from user_info where (select max(ui_age) from user_info);												]
25. 위의 테이블을 삭제
[ drop table user_info												]